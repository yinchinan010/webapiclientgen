//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoWebApi.Controllers.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// This class is used to carry the result of various file uploads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class FileResult : object
	{
		
		/// <summary>
		/// Gets or sets the local path of the file saved on the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IEnumerable<string> FileNames { get; set; }
		
		/// <summary>
		/// Gets or sets the submitter as indicated in the HTML form used to upload the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Submitter { get; set; }
	}
	
	/// <summary>
	/// Complex hero type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Hero : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DemoWebApi.DemoData.Client.Address Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Death { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateOnly DOB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public long Id { get; set; }
		
		/// <summary>
		/// Required
		/// String length: inclusive between 2 and 120
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.StringLength(120, MinimumLength=2)]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IList<DemoWebApi.DemoData.Client.PhoneNumber> PhoneNumbers { get; set; }
		
		/// <summary>
		/// Min length: 6
		/// Matching regular expression pattern: https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)")]
		[System.Runtime.Serialization.DataMember()]
		public string WebAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class SuperHero : DemoWebApi.Controllers.Client.Hero
	{
		
		[System.Runtime.Serialization.DataMember()]
		public bool Super { get; set; }
	}
	
	/// <summary>
	/// Heroes operations. Decorated by nullable directive.
	/// </summary>
	public partial class Heroes
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Heroes(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException(nameof(client), "Null HttpClient.");

			if (client.BaseAddress == null)
				throw new ArgumentNullException(nameof(client), "HttpClient has no BaseAddress");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// DELETE api/Heroes/{id}
		/// </summary>
		public async Task DeleteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/"+id;
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DELETE api/Heroes/{id}
		/// </summary>
		public void Delete(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/"+id;
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET api/Heroes/asyncHeroes
		/// </summary>
		public async Task<DemoWebApi.Controllers.Client.Hero[]> GetAsyncHeroesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/asyncHeroes";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET api/Heroes/asyncHeroes
		/// </summary>
		public DemoWebApi.Controllers.Client.Hero[] GetAsyncHeroes(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/asyncHeroes";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a hero. Nullable reference. MaybeNull
		/// GET api/Heroes/{id}
		/// </summary>
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		public async Task<DemoWebApi.Controllers.Client.Hero> GetHeroAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/"+id;
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a hero. Nullable reference. MaybeNull
		/// GET api/Heroes/{id}
		/// </summary>
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		public DemoWebApi.Controllers.Client.Hero GetHero(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/"+id;
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all heroes.
		/// GET api/Heroes
		/// </summary>
		public async Task<DemoWebApi.Controllers.Client.Hero[]> GetHerosAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all heroes.
		/// GET api/Heroes
		/// </summary>
		public DemoWebApi.Controllers.Client.Hero[] GetHeros(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// MaybeNull
		/// GET api/Heroes/super?id={id}
		/// </summary>
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		public async Task<DemoWebApi.Controllers.Client.SuperHero> GetSuperHeroAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/super?id="+id;
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.SuperHero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// MaybeNull
		/// GET api/Heroes/super?id={id}
		/// </summary>
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		public DemoWebApi.Controllers.Client.SuperHero GetSuperHero(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/super?id="+id;
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.SuperHero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// POST api/Heroes
		/// </summary>
		public async Task<DemoWebApi.Controllers.Client.Hero> PostAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, name);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// POST api/Heroes
		/// </summary>
		public DemoWebApi.Controllers.Client.Hero Post(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, name);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a hero. The client will not expect null. NotNull
		/// POST api/Heroes/q?name={name}
		/// </summary>
		/// <param name="name">name of hero</param>
		/// <returns>Always object.</returns>
		public async Task<DemoWebApi.Controllers.Client.Hero> PostWithQueryAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/q?name="+(name == null ? "" : Uri.EscapeDataString(name));
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a hero. The client will not expect null. NotNull
		/// POST api/Heroes/q?name={name}
		/// </summary>
		/// <param name="name">name of hero</param>
		/// <returns>Always object.</returns>
		public DemoWebApi.Controllers.Client.Hero PostWithQuery(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/q?name="+(name == null ? "" : Uri.EscapeDataString(name));
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update hero.
		/// PUT api/Heroes
		/// </summary>
		public async Task<DemoWebApi.Controllers.Client.Hero> PutAsync(DemoWebApi.Controllers.Client.Hero hero, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, hero);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update hero.
		/// PUT api/Heroes
		/// </summary>
		public DemoWebApi.Controllers.Client.Hero Put(DemoWebApi.Controllers.Client.Hero hero, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, hero);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search heroes
		/// GET api/Heroes/search/{name}
		/// </summary>
		/// <param name="name">keyword contained in hero name.</param>
		/// <returns>Hero array matching the keyword.</returns>
		public async Task<DemoWebApi.Controllers.Client.Hero[]> SearchAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/search/"+(name == null ? "" : Uri.EscapeDataString(name));
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search heroes
		/// GET api/Heroes/search/{name}
		/// </summary>
		/// <param name="name">keyword contained in hero name.</param>
		/// <returns>Hero array matching the keyword.</returns>
		public DemoWebApi.Controllers.Client.Hero[] Search(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Heroes/search/"+(name == null ? "" : Uri.EscapeDataString(name));
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			handleHeaders?.Invoke(httpRequestMessage.Headers);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
namespace DemoWebApi.DemoData.Another.Client
{
	
	
	/// <summary>
	/// 2D position
	/// with X and Y
	/// for Demo
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public struct MyPoint
	{
		
		/// <summary>
		/// X
		/// </summary>
		public double X;
		
		/// <summary>
		/// Y
		/// </summary>
		public double Y;
	}
}
namespace DemoWebApi.DemoData.Base.Client
{
	
	
	/// <summary>
	/// Base class of company and person
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Entity : object
	{
		
		/// <summary>
		/// Multiple addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IList<DemoWebApi.DemoData.Client.Address> Addresses { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Guid> Id { get; set; }
		
		/// <summary>
		/// Name of the entity.
		/// Required
		/// Min length: 2
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.ObjectModel.ObservableCollection<DemoWebApi.DemoData.Client.PhoneNumber> PhoneNumbers { get; set; }
		
		/// <summary>
		/// Matching regular expression pattern: https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)")]
		[System.Runtime.Serialization.DataMember()]
		public System.Uri Web { get; set; }
	}
}
namespace DemoWebApi.DemoData.Client
{
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Address : object
	{
		
		/// <summary>
		/// String length: inclusive between 2 and 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=2)]
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		/// <summary>
		/// String length: inclusive between 2 and 30
		/// </summary>
		[System.ComponentModel.DefaultValueAttribute("Australia")]
		[System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength=2)]
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; } = "Australia";
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		/// <summary>
		/// String length: inclusive between 2 and 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=2)]
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// String length: inclusive between 2 and 30
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength=2)]
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		/// <summary>
		/// String length: inclusive between 2 and 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=2)]
		[System.Runtime.Serialization.DataMember()]
		public string Street1 { get; set; }
		
		/// <summary>
		/// String length: inclusive between 2 and 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=2)]
		[System.Runtime.Serialization.DataMember()]
		public string Street2 { get; set; }
		
		[System.ComponentModel.DefaultValueAttribute(AddressType.Residential)]
		[System.Runtime.Serialization.DataMember()]
		public DemoWebApi.DemoData.Client.AddressType Type { get; set; } = AddressType.Residential;
		
		/// <summary>
		/// It is a field
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DemoWebApi.DemoData.Another.Client.MyPoint Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum AddressType
	{
		
		[System.Runtime.Serialization.EnumMember()]
		Postal,
		
		[System.Runtime.Serialization.EnumMember()]
		Residential,
	}
	
	/// <summary>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class BigNumbers : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Numerics.BigInteger BigInt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Int128 Signed128 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public long Signed64 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.UInt128 Unsigned128 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ulong Unsigned64 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Company : DemoWebApi.DemoData.Base.Client.Entity
	{
		
		/// <summary>
		/// BusinessNumber to be serialized as BusinessNum
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="BusinessNum")]
		public string BusinessNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessNumberType { get; set; }
		
		/// <summary>
		/// Data type: Date
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Date)]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FoundDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateOnly RegisterDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[][] TextMatrix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int[,] Int2D { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int[][] Int2DJagged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IEnumerable<string> Lines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum Days
	{
		
		[System.Runtime.Serialization.EnumMember()]
		Sat = 1,
		
		[System.Runtime.Serialization.EnumMember()]
		Sun = 2,
		
		[System.Runtime.Serialization.EnumMember()]
		Mon = 3,
		
		[System.Runtime.Serialization.EnumMember()]
		Tue = 4,
		
		[System.Runtime.Serialization.EnumMember()]
		Wed = 5,
		
		/// <summary>
		/// Thursday
		/// </summary>
		[System.Runtime.Serialization.EnumMember()]
		Thu = 6,
		
		[System.Runtime.Serialization.EnumMember()]
		Fri = 7,
	}
	
	/// <summary>
	/// To test different serializations against Guid
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class IdMap : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(EmitDefaultValue=false)]
		public System.Guid IdNotEmitDefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Guid> NullableId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public string RequiredName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class IntegralEntity : DemoWebApi.DemoData.Base.Client.Entity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public byte Byte { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int Int { get; set; }
		
		/// <summary>
		/// Range: inclusive between -1000 and 1000000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Range(typeof(System.Int32), "-1000", "1000000")]
		[System.Runtime.Serialization.DataMember()]
		public int ItemCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public sbyte SByte { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public short Short { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public uint UInt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ushort UShort { get; set; }
	}
	
	[Newtonsoft.Json.JsonConverterAttribute(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum MedicalContraindiationResponseTypeReason
	{
		
		[System.Runtime.Serialization.EnumMember(Value="Mm")]
		M,
		
		[System.Runtime.Serialization.EnumMember(Value="Ss")]
		S,
		
		[System.Runtime.Serialization.EnumMember(Value="Pp")]
		P,
		
		[System.Runtime.Serialization.EnumMember(Value="I")]
		I,
		
		[System.Runtime.Serialization.EnumMember(Value="A")]
		A,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum MedicalContraindiationResponseTypeTypeCode
	{
		
		[System.Runtime.Serialization.EnumMember(Value="P")]
		P,
		
		[System.Runtime.Serialization.EnumMember(Value="Tt")]
		T,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MimsPackage : object
	{
		
		/// <summary>
		/// Range: inclusive between 10 and 100
		/// </summary>
		[System.ComponentModel.DefaultValueAttribute(20)]
		[System.ComponentModel.DataAnnotations.Range(typeof(System.Int32), "10", "100", ErrorMessage="KK has to be between 10 and 100.")]
		[System.Runtime.Serialization.DataMember()]
		public int KK { get; set; } = 20;
		
		/// <summary>
		/// Having an initialized value in the property is not like defining a DefaultValueAttribute. Such intialization happens at run time,
		/// and there's no reliable way for a codegen to know if the value is declared by the programmer, or is actually the natural default value like 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int KK2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DemoWebApi.DemoData.Client.MyEnumType> OptionalEnum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<int> OptionalInt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DemoWebApi.DemoData.Client.MimsResult<decimal> Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MimsResult<T> : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTime GeneratedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public T Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum MyEnumType
	{
		
		[System.Runtime.Serialization.EnumMember()]
		First = 1,
		
		[System.Runtime.Serialization.EnumMember()]
		Two = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MyGeneric<T, K, U> : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public K MyK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public T MyT { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public U MyU { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MyPeopleDic : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IDictionary<string, string> AnotherDic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IDictionary<string, DemoWebApi.DemoData.Client.Person> Dic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IDictionary<int, string> IntDic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Person : DemoWebApi.DemoData.Base.Client.Entity
	{
		
		/// <summary>
		/// Data type: Date
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Date)]
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Baptised { get; set; }
		
		/// <summary>
		/// Date of Birth.
		/// This is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> DOB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GivenName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Surname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PhoneNumber : object
	{
		
		/// <summary>
		/// Max length: 120
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(120)]
		[System.Runtime.Serialization.DataMember()]
		public string FullNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DemoWebApi.DemoData.Client.PhoneType PhoneType { get; set; }
	}
	
	/// <summary>
	/// Phone type
	/// Tel, Mobile, Skyp and Fax
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum PhoneType
	{
		
		/// <summary>
		/// Land line
		/// </summary>
		[System.Runtime.Serialization.EnumMember()]
		Tel,
		
		/// <summary>
		/// Mobile phone
		/// </summary>
		[System.Runtime.Serialization.EnumMember()]
		Mobile,
		
		[System.Runtime.Serialization.EnumMember()]
		Skype,
		
		[System.Runtime.Serialization.EnumMember()]
		Fax,
	}
}
namespace DemoWebApi.Models.Client
{
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class AddExternalLoginBindingModel : object
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ExternalAccessToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class ChangePasswordBindingModel : object
	{
		
		/// <summary>
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string ConfirmPassword { get; set; }
		
		/// <summary>
		/// Required
		/// String length: inclusive between 6 and 100
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=6, ErrorMessage="The {0} must be at least {2} characters long.")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// Required
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string OldPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class RegisterBindingModel : object
	{
		
		/// <summary>
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string ConfirmPassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// String length: inclusive between 6 and 100
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=6, ErrorMessage="The {0} must be at least {2} characters long.")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class RegisterExternalBindingModel : object
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class RemoveLoginBindingModel : object
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string LoginProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ProviderKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class SetPasswordBindingModel : object
	{
		
		/// <summary>
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string ConfirmPassword { get; set; }
		
		/// <summary>
		/// Required
		/// String length: inclusive between 6 and 100
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=6, ErrorMessage="The {0} must be at least {2} characters long.")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string NewPassword { get; set; }
	}
	
	/// <summary>
	/// Auth token
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class TokenResponseModel : object
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public string Expires { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public int ExpiresIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issued")]
		public string Issued { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string TokenType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
}
namespace Fonlow.PoemsApp.Data.Client
{
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Album : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Fonlow.PoemsApp.Data.Client.BodyType BodyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		/// <summary>
		/// Author should be able to alter. The default is the created time. DateTime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Published { get; set; }
		
		/// <summary>
		/// First published Url
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PublishedUrl { get; set; }
		
		/// <summary>
		/// Album title should never be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Annotation : object
	{
		
		/// <summary>
		/// HTML description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		/// <summary>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Primary URL for online description like an entry in Wikipedia
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class AnnotationBrief : object
	{
		
		/// <summary>
		/// Count of poems associated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<int> Count { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public System.Guid Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class AnnotationPoemCount : Fonlow.PoemsApp.Data.Client.MetaDataPoemCount
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum BodyType
	{
		
		[System.Runtime.Serialization.EnumMember()]
		Text,
		
		[System.Runtime.Serialization.EnumMember()]
		HTML,
		
		[System.Runtime.Serialization.EnumMember()]
		MD,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class ExternalImageMap : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid[] PoemIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SrcUrl { get; set; }
	}
	
	/// <summary>
	/// For wrting or speaking.
	/// https://www.loc.gov/standards/iso639-2/php/code_list.php
	/// https://www.rfc-editor.org/rfc/rfc5646
	/// https://iso639-3.sil.org/code_tables/639/read
	/// https://iso639-3.sil.org/code_tables/download_tables
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class LanguageCode : object
	{
		
		/// <summary>
		/// iso639 code. Could be 639-3, 639-2 or 639-1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Display { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class LoginModel : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PictureUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MetaData : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MetaDataPoemCount : object
	{
		
		/// <summary>
		/// Count of poems associated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int Count { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public System.Guid Id { get; set; }
	}
	
	/// <summary>
	/// Associated with a specific poem only.
	/// In case when a phase may be up to different interpretations, then used numbered annotation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class NumberedAnnotation : object
	{
		
		/// <summary>
		/// HTML description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		/// <summary>
		/// Range: inclusive between 1 and 2147483647
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.ComponentModel.DataAnnotations.Range(typeof(System.Int32), "1", "2147483647")]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public int OrderNumber { get; set; }
		
		/// <summary>
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public System.Guid PoemId { get; set; }
		
		/// <summary>
		/// Primary URL for online description like an entry in Wikipedia
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class NumberedAnnotationBrief : object
	{
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public System.Guid Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public int OrderNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Picture : Fonlow.PoemsApp.Data.Client.PictureMeta
	{
		
		[System.Runtime.Serialization.DataMember()]
		public byte[] Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PictureMeta : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PicturePoemCount : Fonlow.PoemsApp.Data.Client.MetaDataPoemCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid[] PoemIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Poem : object
	{
		
		/// <summary>
		/// A poem may be included in multipe albums.
		/// UI may use this to present albums
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Guid[] AlbumIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid[] AnnotationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		/// <summary>
		/// When bodytype is HTML, a redundant copy for full text search. A poor man solution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BodyPlain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Fonlow.PoemsApp.Data.Client.BodyType BodyType { get; set; }
		
		/// <summary>
		/// Author should be able to alter. The default is the created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTime> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTime> Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Fonlow.PoemsApp.Data.Client.NumberedAnnotationBrief[] NumberedAnnotationBriefs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int NumberOfStanza { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid[] PictureIds { get; set; }
		
		/// <summary>
		/// to distinguish draft or published. DateTime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Published { get; set; }
		
		/// <summary>
		/// Initial published URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PublishedUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RyhmesCsv { get; set; }
		
		/// <summary>
		/// UI use this to represent tags. This is not included n DB.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Guid[] TagIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PoemAlbumMap : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid AlbumId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid PoemId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PoemAnnotationMap : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid AnnotationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid PoemId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PoemBrief : object
	{
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public System.DateTime Date { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public System.Guid Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Published { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid[] TagIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Highest level container for every poems written by a poet, for exporting to other formats
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PoemCollection : object
	{
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public Fonlow.PoemsApp.Data.Client.PoemAlbumMap[] AlbumMaps { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public Fonlow.PoemsApp.Data.Client.Album[] Albums { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public Fonlow.PoemsApp.Data.Client.PoemAnnotationMap[] AnnotationMaps { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public Fonlow.PoemsApp.Data.Client.Annotation[] Annotations { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public Fonlow.PoemsApp.Data.Client.MetaData[] KeyValues { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public Fonlow.PoemsApp.Data.Client.NumberedAnnotation[] NumberedAnnotations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Fonlow.PoemsApp.Data.Client.PoemPictureMap[] PictureMaps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Fonlow.PoemsApp.Data.Client.PictureMeta[] PictureMetas { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public Fonlow.PoemsApp.Data.Client.Poem[] Poems { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public Fonlow.PoemsApp.Data.Client.PoemTagMap[] TagMaps { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public Fonlow.PoemsApp.Data.Client.Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PoemPictureMap : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid PictureId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid PoemId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PoemTagMap : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid PoemId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid TagId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Tag : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class TagPoemCount : Fonlow.PoemsApp.Data.Client.MetaDataPoemCount
	{
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
